[tool.poetry]
name = "langchain-google-community"
version = "1.0.4"
description = "An integration package connecting miscellaneous Google's products and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-google"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-google/tree/main/libs/community"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
langchain-core = ">=0.1.33,<0.3"
langchain-community = ">=0.0.28"
google-api-core = "^2.17.1"
google-api-python-client = "^2.122.0"
grpcio = "^1.62.0"
google-cloud-bigquery = { version = "^3.21.0", optional = true }
google-cloud-documentai = { version = "^2.26.0", optional = true }
google-cloud-contentwarehouse = { version = "^0.7.7", optional = true }
google-cloud-documentai-toolbox = { version = "^0.13.3a0", optional = true }
gapic-google-longrunning = { version = "^0.11.2", optional = true }
google-auth-httplib2 = { version = "^0.2.0", optional = true }
google-auth-oauthlib = { version = "^1.2.0", optional = true }
google-cloud-storage = { version = "^2.16.0", optional = true }
google-cloud-speech = { version = "^2.26.0", optional = true }
googlemaps = { version = "^4.10.0", optional = true }
google-cloud-texttospeech = { version = "^2.16.3", optional = true }
google-cloud-translate = { version = "^3.15.3", optional = true }
google-cloud-discoveryengine = { version = "^0.11.11", optional = true }
google-cloud-vision = { version = "^3.7.2", optional = true }
beautifulsoup4 = { version = "^4.12.3", optional = true }

[tool.poetry.extras]
bigquery = ["google-cloud-bigquery"]
docai = [
  "google-cloud-documentai",
  "google-cloud-contentwarehouse",
  "google-cloud-documentai-toolbox",
  "gapic-google-longrunning",
]
drive = ["google-auth-httplib2", "google-auth-oauthlib"]
gcs = ["google-cloud-storage"]
speech = ["google-cloud-speech"]
places = ["googlemaps"]
texttospeech = ["google-cloud-texttospeech"]
translate = ["google-cloud-translate"]
vertexaisearch = ["google-cloud-discoveryengine"]
vision = ["google-cloud-vision"]
gmail = ["google-auth-httplib2", "google-auth-oauthlib", "beautifulsoup4"]

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.3.0"
freezegun = "^1.2.2"
pytest-mock = "^3.10.0"
syrupy = "^4.0.2"
pytest-watcher = "^0.3.4"
pytest-asyncio = "^0.21.1"
google-cloud-documentai = "^2.24.2"
google-cloud-documentai-toolbox = "^0.13.3a0"
google-cloud-bigquery = "^3.19.0"
google-cloud-discoveryengine = "^0.11.11"
cloudpickle = "^3.0.0"

[tool.poetry.group.codespell]
optional = true

[tool.codespell]
ignore-words-list = "rouge"

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.0"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]
pillow = "^10.1.0"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"

[tool.poetry.group.typing.dependencies]
mypy = "^0.991"
types-requests = "^2.28.11.5"
types-google-cloud-ndb = "^2.2.0.1"
types-pillow = "^10.1.0.2"
types-protobuf = "^4.24.0.20240302"
types-beautifulsoup4 = "^4.12.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pillow = "^10.1.0"
types-requests = "^2.31.0.10"
types-pillow = "^10.1.0.2"
types-google-cloud-ndb = "^2.2.0.1"

[tool.ruff]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
]

[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
