[tool.poetry]
name = "langchain-google-vertexai"
version = "2.0.9"
description = "An integration package connecting Google VertexAI and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-google"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-google/tree/main/libs/vertexai"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
langchain-core = ">=0.3.15,<0.4"
google-cloud-aiplatform = "^1.70.0"
google-cloud-storage = "^2.18.0"
# optional dependencies
anthropic = { extras = ["vertexai"], version = ">=0.35.0,<1", optional = true }
langchain-mistralai = { version = ">=0.2.0,<1", optional = true }
httpx = "^0.27.0"
httpx-sse = "^0.4.0"
pydantic = ">=2.9,<2.10"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.3.0"
pytest-xdist = "^3.0"
pytest-order =  "^1.3"
pytest-retry = "^1.6.3"
freezegun = "^1.2.2"
pytest-mock = "^3.10.0"
syrupy = "^4.0.2"
pytest-watcher = "^0.3.4"
pytest-asyncio = "^0.21.1"
types-requests = "^2.31.0.20231231"
types-protobuf = "^4.24.0.4"
numexpr = "^2.8.6"
numpy = [
  { version = "^1", python = "<3.12" },
  { version = "^1.26.0", python = ">=3.12" },
]
google-api-python-client = "^2.117.0"
langchain = "^0.3.7"
langchain-tests = "0.3.1"
anthropic = { extras = ["vertexai"], version = ">=0.35.0,<1" }


[tool.codespell]
ignore-words-list = "rouge"


[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.0"

[tool.poetry.extras]
anthropic = ["anthropic"]
mistral = ["langchain-mistralai"]


[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]
numexpr = { version = "^2.8.8", python = ">=3.9,<4.0" }
google-api-python-client = "^2.114.0"
google-cloud-datastore = "^2.19.0"
langchain-mistralai = ">=0.2.0,<1"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"


[tool.poetry.group.typing.dependencies]
mypy = "^1"
types-google-cloud-ndb = "^2.2.0.20240106"
types-protobuf = "^4.24.0.4"
types-requests = "^2.31.0"
anthropic = { extras = ["vertexai"], version = ">=0.35.0,<1", optional = true }


[tool.poetry.group.dev.dependencies]

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
]

[tool.mypy]
check_untyped_defs = true
error_summary = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
