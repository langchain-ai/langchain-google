[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "langchain-google-vertexai"
version = "2.0.28"
description = "An integration package connecting Google VertexAI and LangChain"
authors = []
license = {text = "MIT"}
requires-python = ">=3.10"
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-google"

dependencies = [
    "langchain-core>=0.3.75",
    "google-cloud-aiplatform>=1.97.0,<2",
    "google-cloud-storage>=2.18.0,<3",
    "httpx>=0.28.1,<1",
    "httpx-sse>=0.4.1,<1",
    "pydantic>=2.9,<3",
    "validators>=0.22.0,<1",
    "bottleneck>=1.4.2,<2",
    "numexpr>=2.8.6,<3",
    "pyarrow>=19.0.1,<20",
    "protobuf>=4.21.0,<6.0.0",
]

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-google/tree/main/libs/vertexai"

[project.optional-dependencies]
anthropic = ["anthropic[vertexai]>=0.35.0,<1"]
mistral = ["langchain-mistralai>=0.2.0,<1"]

[dependency-groups]
test = [
    "pytest>=7.3.0,<8",
    "pytest-xdist>=3.0,<4",
    "pytest-order>=1.3,<2",
    "pytest-retry>=1.6.3,<2",
    "freezegun>=1.2.2,<2",
    "pytest-mock>=3.10.0,<4",
    "syrupy>=4.0.2,<5",
    "pytest-watcher>=0.3.4,<1",
    "pytest-asyncio>=0.21.1,<1",
    "pytest-socket>=0.7.0,<1",
    "types-requests>=2.31.0,<3",
    "types-protobuf>=4.24.0.4,<5",
    "google-api-python-client>=2.117.0,<3",
    "langchain>=0.3.27,<1",
    "anthropic[vertexai]>=0.35.0,<1",
    "validators>=0.34.0,<1",
    "langchain-tests>=0.2.0,<1",
]

test_integration = [
    "numexpr>=2.8.8; python_version>='3.10'",
    "numpy>=1.26.4; python_version<'3.13'",
    "numpy>=2.1.0; python_version>='3.13'",
    "google-api-python-client>=2.114.0,<3",
    "google-cloud-datastore>=2.19.0,<3",
    "langchain-mistralai>=0.2.0,<1",
    "langchain-tests>=0.2.0,<1",
]

lint = [
    "ruff>=0.12.10,<1",
]

typing = [
    "mypy>=1.17.1,<2",
    "types-google-cloud-ndb>=2.2.0.20240106,<3",
    "types-protobuf>=4.24.0.4,<5",
    "types-requests>=2.31.0,<3",
    "anthropic[vertexai]>=0.35.0,<1",
]

dev = []

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
]

[tool.mypy]
check_untyped_defs = true
error_summary = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
    "requires: mark tests as requiring a specific library",
    "asyncio: mark tests as requiring asyncio",
    "compile: mark placeholder test used to compile integration tests without running them",
    "extended: mark tests as extended integration tests",
]
asyncio_mode = "auto"
